// Generated by CoffeeScript 1.8.0
(function() {
  var address, assert, help, suite, vows;

  vows = require('vows');

  assert = require('assert');

  help = require('../lib/helpers');

  address = require('../lib/address');

  suite = vows.describe("Pink Address");

  suite.addBatch({
    "address without pubkey": {
      topic: "udp://123.134.221.4:17892",
      "parses url": function(url) {
        return assert.notEqual(address.parse(url), false);
      },
      "encodes a buffer": function(url) {
        return assert.isTrue(Buffer.isBuffer(address.parse(url).toBuffer()));
      },
      "restores compact binary buffer": function(url) {
        return assert.equal(address.parse(address.parse(url).toBuffer()).toString(), url);
      }
    },
    "address with public key": {
      topic: "udp://Dp1iRcubw2bcvSBhrff9EtRXYDXnHQBqcL2wEM5ViSek@4.3.2.1:5678",
      "buffer and string encoding is lossless": function(url) {
        return assert.equal(address.parse(address.parse(url).toBuffer()).toString(), url);
      },
      "publicKey is a buffer": function(url) {
        var addr;
        addr = address.parse(address.parse(url).toBuffer());
        assert.notEqual(addr.publicKey, null);
        assert.isTrue(Buffer.isBuffer(addr.publicKey));
        return assert.equal(addr.publicKey.length, help.nacl.box.publicKeyLength);
      },
      "can encode buffer without a publicKey": function(url) {
        var addr;
        addr = address.parse(address.parse(url).toBuffer({
          includePublicKey: false
        }));
        return assert.equal(addr.publicKey, null);
      }
    }
  });

  suite.run();

}).call(this);
